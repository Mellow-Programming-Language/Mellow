// A basic Trie (Digital Tree) implementation as key-value map.

import std.io;
import std.conv;
import std.core;

variant Trie(T) {
    Root (Maybe!T, []Trie!T),
    Node (Maybe!T, char, []Trie!T)
}

func trySubTries(T)(subTries: []Trie!T, c: char): Maybe!int {
    foreach (i, subTrie; subTries) {
        match (subTrie) {
            Node (_, x, _) if (x == c) :: return Some!int(i);
        }
    }
    return None!int;
}

func findSubTrie(T)(trie: Trie!T, c: char): Maybe!int {
    match(trie) {
        Root (_, subTries) ::
            return trySubTries!T(subTries, c);
        Node (_, _, subTries) :: {
            return trySubTries!T(subTries, c);
        }
    }
}

func insertSubTrie(T)(trie: Trie!T, key: string, val: T,
                      subTries: []Trie!T): []Trie!T {
    if (findSubTrie!T(trie, key[0]) is Some (i)) {
        return subTries[..i] ~ insertTrieVal!T(subTries[i], key[1..], val)
                             ~ subTries[i+1..];
    }
    return subTries ~ insertTrieVal!T(Node!T(None!T, key[0], []), key[1..], val);
}

func findTrieVal(T)(trie: Trie!T, key: string): Maybe!T {
    match (trie) {
        Root (subVal, _) if (key == "") :: return subVal;
        Root (_, subTries) ::
            match (findSubTrie!T(trie, key[0])) {
                Some (i)    :: return findTrieVal!T(subTries[i], key[1..]);
                _           :: return None!T;
            }
        Node (subVal, _, _) if (key == "") :: return subVal;
        Node (_, _, subTries) ::
            match (findSubTrie!T(trie, key[0])) {
                Some (i)    :: return findTrieVal!T(subTries[i], key[1..]);
                _           :: return None!T;
            }
    }
}

func insertTrieVal(T)(trie: Trie!T, key: string, val: T): Trie!T {
    match (trie) {
        Root (_, subTries) if (key == "") ::
            return Root!T(Some!T(val), subTries);
        Root (subVal, subTries) ::
            return Root!T(subVal, insertSubTrie!T(trie, key, val, subTries));
        Node (_, subChar, subTries) if (key == "") ::
            return Node!T(Some!T(val), subChar, subTries);
        Node (subVal, subChar, subTries) :: return Node!T(
            subVal, subChar, insertSubTrie!T(trie, key, val, subTries)
        );
    }
}

func createTrie(T)(): Trie!T {
    return Root!T(None!T, []);
}
