// ISSUE: Tests for end block (then/else/coda) functionality on while-stmt
// EXPECTS: "AA B1 C1 D1 E12 F1 G2 H2 I12 J1 K13 L12 M23 N23 O13 P12 -- A B1 C D1 E1 F12 G12 H1 I2 J2 K12 L13 M12 N13 O23 P23 "

// Specifically, we're just testing to ensure that each of those blocks are
// executed when their semantics claim they should be executed, and in the
// correct order, since order is respected

import std.io;
import std.conv;

func main() {
    //
    // When the while loop _does_ execute the block at least once
    //

    // Sanity case
    while (x := 1; x <= 2) {
        write("A");
        x += 1;
    }
    write(" ");

    while (x := 1; x <= 1) {
        write("B");
        x += 1;
    }
    then {
        write("1");
    }
    write(" ");

    while (x := 1; x <= 1) {
        write("C");
        x += 1;
    }
    coda {
        write("1");
    }
    write(" ");

    while (x := 1; x <= 1) {
        write("D1");
        x += 1;
    }
    else {
        write("D2");
    }
    write(" ");

    while (x := 1; x <= 1) {
        write("E");
        x += 1;
    }
    then {
        write("1");
    }
    coda {
        write("2");
    }
    write(" ");

    while (x := 1; x <= 1) {
        write("F");
        x += 1;
    }
    then {
        write("1");
    }
    else {
        write("2");
    }
    write(" ");

    while (x := 1; x <= 1) {
        write("G");
        x += 1;
    }
    else {
        write("1");
    }
    then {
        write("2");
    }
    write(" ");

    while (x := 1; x <= 1) {
        write("H");
        x += 1;
    }
    else {
        write("1");
    }
    coda {
        write("2");
    }
    write(" ");

    while (x := 1; x <= 1) {
        write("I");
        x += 1;
    }
    coda {
        write("1");
    }
    then {
        write("2");
    }
    write(" ");

    while (x := 1; x <= 1) {
        write("J");
        x += 1;
    }
    coda {
        write("1");
    }
    else {
        write("2");
    }
    write(" ");

    while (x := 1; x <= 1) {
        write("K");
        x += 1;
    }
    then {
        write("1");
    }
    else {
        write("2");
    }
    coda {
        write("3");
    }
    write(" ");

    while (x := 1; x <= 1) {
        write("L");
        x += 1;
    }
    then {
        write("1");
    }
    coda {
        write("2");
    }
    else {
        write("3");
    }
    write(" ");

    while (x := 1; x <= 1) {
        write("M");
        x += 1;
    }
    else {
        write("1");
    }
    then {
        write("2");
    }
    coda {
        write("3");
    }
    write(" ");

    while (x := 1; x <= 1) {
        write("N");
        x += 1;
    }
    else {
        write("1");
    }
    coda {
        write("2");
    }
    then {
        write("3");
    }
    write(" ");

    while (x := 1; x <= 1) {
        write("O");
        x += 1;
    }
    coda {
        write("1");
    }
    else {
        write("2");
    }
    then {
        write("3");
    }
    write(" ");

    while (x := 1; x <= 1) {
        write("P");
        x += 1;
    }
    coda {
        write("1");
    }
    then {
        write("2");
    }
    else {
        write("3");
    }
    write(" ");

    // Separator for the two test case classes
    write("-- ");

    //
    // When the while loop _does not_ execute the block at least once
    //

    // Sanity case
    write("A");
    while (x := 2; x <= 1) {
        write(".A.");
        x += 1;
    }
    write(" ");

    write("B");
    while (x := 2; x <= 1) {
        write(".B.");
        x += 1;
    }
    then {
        write("1");
    }
    write(" ");

    write("C");
    while (x := 2; x <= 1) {
        write(".C.");
        x += 1;
    }
    coda {
        write("1");
    }
    write(" ");

    write("D");
    while (x := 2; x <= 1) {
        write(".D.");
        x += 1;
    }
    else {
        write("1");
    }
    write(" ");

    write("E");
    while (x := 2; x <= 1) {
        write(".E.");
        x += 1;
    }
    then {
        write("1");
    }
    coda {
        write("2");
    }
    write(" ");

    write("F");
    while (x := 2; x <= 1) {
        write(".F.");
        x += 1;
    }
    then {
        write("1");
    }
    else {
        write("2");
    }
    write(" ");

    write("G");
    while (x := 2; x <= 1) {
        write(".G.");
        x += 1;
    }
    else {
        write("1");
    }
    then {
        write("2");
    }
    write(" ");

    write("H");
    while (x := 2; x <= 1) {
        write(".H.");
        x += 1;
    }
    else {
        write("1");
    }
    coda {
        write("2");
    }
    write(" ");

    write("I");
    while (x := 2; x <= 1) {
        write(".I.");
        x += 1;
    }
    coda {
        write("1");
    }
    then {
        write("2");
    }
    write(" ");

    write("J");
    while (x := 2; x <= 1) {
        write(".J.");
        x += 1;
    }
    coda {
        write("1");
    }
    else {
        write("2");
    }
    write(" ");

    write("K");
    while (x := 2; x <= 1) {
        write(".K.");
        x += 1;
    }
    then {
        write("1");
    }
    else {
        write("2");
    }
    coda {
        write("3");
    }
    write(" ");

    write("L");
    while (x := 2; x <= 1) {
        write(".L.");
        x += 1;
    }
    then {
        write("1");
    }
    coda {
        write("2");
    }
    else {
        write("3");
    }
    write(" ");

    write("M");
    while (x := 2; x <= 1) {
        write(".M.");
        x += 1;
    }
    else {
        write("1");
    }
    then {
        write("2");
    }
    coda {
        write("3");
    }
    write(" ");

    write("N");
    while (x := 2; x <= 1) {
        write(".N.");
        x += 1;
    }
    else {
        write("1");
    }
    coda {
        write("2");
    }
    then {
        write("3");
    }
    write(" ");

    write("O");
    while (x := 2; x <= 1) {
        write(".O.");
        x += 1;
    }
    coda {
        write("1");
    }
    else {
        write("2");
    }
    then {
        write("3");
    }
    write(" ");

    write("P");
    while (x := 2; x <= 1) {
        write(".P.");
        x += 1;
    }
    coda {
        write("1");
    }
    then {
        write("2");
    }
    else {
        write("3");
    }
    write(" ");
    writeln("");
}
