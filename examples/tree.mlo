
import std.io;
import std.conv;

variant Tree(T) {
    Branch (Tree!T, T, Tree!T),
    Leaf
}

func addNode(T)(val: T, tree: Tree!T): Tree!T {
    match (tree) {
        Leaf ::
            return Branch!T(Leaf!T, val, Leaf!T);
        Branch (left, nodeVal, right) if (val < nodeVal) ::
            return Branch!T(addNode!T(val, left), nodeVal, right);
        Branch (left, nodeVal, right) ::
            return Branch!T(left, nodeVal, addNode!T(val, right));
    }
}

func createTree(T)(vals: []T): Tree!T {
    if (vals.length == 0) {
        return Leaf!T;
    }
    root := Leaf!T;
    foreach (val; vals) {
        root = addNode!T(val, root);
    }
    return root;
}

func printTree(T)(tree: Tree!T, indent: string) {
    if (tree is Branch(left, val, right)) {
        str := intToString(val);
        writeln(indent ~ intToString(val));
        printTree!T(left, indent ~ "  ");
        printTree!T(right, indent ~ "  ");
    }
}

func isMember(T)(checkVal: T, tree: Tree!T): bool {
    match (tree) {
        Leaf ::
            return false;
        Branch (_, nodeVal, _) if (checkVal == nodeVal) ::
            return true;
        Branch (left, nodeVal, _) if (checkVal < nodeVal) ::
            return isMember!T(checkVal, left);
        Branch (_, nodeVal, right) ::
            return isMember!T(checkVal, right);
    }
}

func main() {
    tree := Branch!int(
        Branch!int(
            Leaf!int,
            4,
            Leaf!int
        ),
        5,
        Branch!int(
            Leaf!int,
            6,
            Leaf!int
        )
    );
    printTree!int(tree, "");
    binTree := createTree!int([5, 1, 10, 3, 7, 0, 12]);
    printTree!int(binTree, "");
    if (isMember!int(4, binTree)) {
        writeln("Found!");
    }
    else {
        writeln("Not Found!");
    }
    if (isMember!int(7, binTree)) {
        writeln("Found!");
    }
    else {
        writeln("Not Found!");
    }
}
