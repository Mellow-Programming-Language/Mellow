
import std.io;
import std.conv;
import std.core;

variant Token {
    BoolTok (int, int),
    ByteTok (int, int),
    CharTok (int, int),
    ColonTok (int, int),
    ColonColon (int, int),
    ColonEq (int, int),
    DoubleTok (int, int),
    ElseTok (int, int),
    ExternTok (int, int),
    FloatTok (int, int),
    ForeachTok (int, int),
    FuncTok (int, int),
    IdTok (string, int, int),
    IfTok (int, int),
    IntTok (int, int),
    LeftBrace (int, int),
    LeftBracket (int, int),
    LeftParen (int, int),
    LongTok (int, int),
    MatchTok (int, int),
    RightBrace (int, int),
    RightBracket (int, int),
    RightParen (int, int),
    SemicolonTok (int, int),
    ShortTok (int, int),
    SpawnTok (int, int),
    StringTok (int, int),
    StructTok (int, int),
    VariantTok (int, int),
    VoidTok (int, int),
    WhileTok (int, int),
    YieldTok (int, int),
}

func formatToken(tok: Token): string {
    match (tok)    {
        BoolTok (_, _) :: return "BoolTok";
        ByteTok (_, _) :: return "ByteTok";
        CharTok (_, _) :: return "CharTok";
        ColonColon (_, _) :: return "ColonColon";
        ColonTok (_, _) :: return "ColonTok";
        DoubleTok (_, _) :: return "DoubleTok";
        ElseTok (_, _) :: return "ElseTok";
        ExternTok (_, _) :: return "ExternTok";
        FloatTok (_, _) :: return "FloatTok";
        ForeachTok (_, _) :: return "ForeachTok";
        FuncTok (_, _) :: return "FuncTok";
        IdTok (str, _, _) :: return "IdTok (" ~ str ~ ")";
        IfTok (_, _) :: return "IfTok";
        IntTok (_, _) :: return "IntTok";
        LeftBrace (_, _) :: return "LeftBrace";
        LeftBracket (_, _) :: return "LeftBracket";
        LeftParen (_, _) :: return "LeftParen";
        LongTok (_, _) :: return "LongTok";
        MatchTok (_, _) :: return "MatchTok";
        RightBrace (_, _) :: return "RightBrace";
        RightBracket (_, _) :: return "RightBracket";
        RightParen (_, _) :: return "RightParen";
        ShortTok (_, _) :: return "ShortTok";
        SpawnTok (_, _) :: return "SpawnTok";
        StringTok (_, _) :: return "StringTok";
        StructTok (_, _) :: return "StructTok";
        VariantTok (_, _) :: return "VariantTok";
        VoidTok (_, _) :: return "VoidTok";
        WhileTok (_, _) :: return "WhileTok";
        YieldTok (_, _) :: return "YieldTok";
    }
    return "NOTOK";
}

func isWhitespace(c: char): bool {
    match (c) {
        ' '  :: return true;
        '\n' :: return true;
        '\r' :: return true;
        '\t' :: return true;
    }
    return false;
}

func isIdBegin(c: char): bool {
    match (c) {
        '_' :: return true;
        _ if (ord(c) >= ord('A') && ord(c) <= ord('Z')) :: return true;
        _ if (ord(c) >= ord('a') && ord(c) <= ord('z')) :: return true;
    }
    return false;
}

func isIdChar(c: char): bool {
    match (c) {
        '_' :: return true;
        _ if (ord(c) >= ord('A') && ord(c) <= ord('Z')) :: return true;
        _ if (ord(c) >= ord('a') && ord(c) <= ord('z')) :: return true;
        _ if (ord(c) >= ord('0') && ord(c) <= ord('9')) :: return true;
    }
    return false;
}

func tokenizer(source: string, line: int): []Token {
    tokens: []Token;
    while (i := 0; i < source.length) {
        match (source[i..]) {
            [c, ..] if (isWhitespace(c)) :: {
                i = i + 1;
                while (i < source.length && isWhitespace(source[i])) {
                    i = i + 1;
                }
            }
            [c, ..] if (isIdBegin(c)) :: {
                j := i + 1;
                while (j < source.length && isIdChar(source[j])) {
                    j = j + 1;
                }
                match (source[i..j]) {
                    "bool"    :: tokens ~= BoolTok    (line, i);
                    "byte"    :: tokens ~= ByteTok    (line, i);
                    "char"    :: tokens ~= CharTok    (line, i);
                    "double"  :: tokens ~= DoubleTok  (line, i);
                    "else"    :: tokens ~= ElseTok    (line, i);
                    "extern"  :: tokens ~= ExternTok  (line, i);
                    "float"   :: tokens ~= FloatTok   (line, i);
                    "foreach" :: tokens ~= ForeachTok (line, i);
                    "func"    :: tokens ~= FuncTok    (line, i);
                    "if"      :: tokens ~= IfTok      (line, i);
                    "int"     :: tokens ~= IntTok     (line, i);
                    "long"    :: tokens ~= LongTok    (line, i);
                    "match"   :: tokens ~= MatchTok   (line, i);
                    "short"   :: tokens ~= ShortTok   (line, i);
                    "spawn"   :: tokens ~= SpawnTok   (line, i);
                    "string"  :: tokens ~= StringTok  (line, i);
                    "struct"  :: tokens ~= StructTok  (line, i);
                    "variant" :: tokens ~= VariantTok (line, i);
                    "void"    :: tokens ~= VoidTok    (line, i);
                    "while"   :: tokens ~= WhileTok   (line, i);
                    "yield"   :: tokens ~= YieldTok   (line, i);
                    _         :: tokens ~= IdTok      (source[i..j], line, i);
                }
                i = j;
            }
            ['{', ..] :: {
                tokens ~= LeftBrace(line, i);          i = i + 1;
            }
            ['}', ..] :: {
                tokens ~= RightBrace(line, i);         i = i + 1;
            }
            ['(', ..] :: {
                tokens ~= LeftParen(line, i);          i = i + 1;
            }
            [')', ..] :: {
                tokens ~= RightParen(line, i);         i = i + 1;
            }
            ['[', ..] :: {
                tokens ~= LeftBracket(line, i);        i = i + 1;
            }
            [']', ..] :: {
                tokens ~= RightBracket(line, i);       i = i + 1;
            }
            [':', ':', ..] :: {
                tokens ~= ColonColon(line, i);         i = i + 2;
            }
            [':', '=', ..] :: {
                tokens ~= ColonEq(line, i);            i = i + 2;
            }
            [':', ..] :: {
                tokens ~= ColonTok(line, i);           i = i + 1;
            }
            [';', ..] :: {
                tokens ~= SemicolonTok(line, i);       i = i + 1;
            }
        }
    }
    return tokens;
}

func main(argv: []string) {
    if (argv.length < 2) {
        writeln("Usage: " ~ argv[0] ~ " [filename]");
        return;
    }
    tokens: []Token;
    if (mellow_fopen(argv[1], Read) is Some (file)) {
        while (i := 1; mellow_freadln(file) is Some (line)) {
            tokens = tokens ~ tokenizer(line, i);
            i = i + 1;
        }
    }
    foreach (tok; tokens) {
        writeln(formatToken(tok));
    }
}
