
import std.io;
import std.conv;

variant LinkedList(T) {
    ListNode (T, LinkedList!T),
    EmptyList
}

func appendElem(T)(list: LinkedList!T, elem: T): LinkedList!T {
    match (list) {
        EmptyList ::
            return ListNode!T(elem, EmptyList!T);
        ListNode(val, right) ::
            if (right is EmptyList) {
                return ListNode!T(val, ListNode!T(elem, EmptyList!T));
            }
            else {
                return ListNode!T(val, appendElem!T(right, elem));
            }
    }
}

func printList(list: LinkedList!int) {
    if (list is ListNode(elem, rest)) {
        writeln(intToString(elem));
        printList(rest);
    }
}

func listToArray(T)(list: LinkedList!T): []T {
    if (list is ListNode(elem, rest)) {
        return [elem] ~ listToArray!T(rest);
    }
    null: []T;
    return null;
}

func main() {
    list := EmptyList!int;
    foreach (val; [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) {
        list = appendElem!int(list, val);
    }
    printList(list);
    foreach (val; listToArray!int(list)) {
        writeln(intToString(val));
    }
}
