
// bf_complete.mlo - A fully functioning brainfuck interpreter which
//                   demonstrates several Mellow Language features.

import std.io;
import std.conv;

// merge input file into a single string for interpreting.
func tokenizeInput(inFile: File): string
{
    prog : string;
    while (mellow_freadln(inFile) is Some (line))
    {
        prog ~= line;
    }
    return prog;
}

// convert a bf cell value to a string (for printing)
func cellToString(cell: byte): string
{
    if (chr(byteToInt(cell)) is Some (charrr))
    {
        return charToString(charrr);
    }
}

// readChar line memory struct.
struct Line_mem {
    data: string;
    ind : int;
}

func readChar(mem: Line_mem): char
{    
    if (mem.ind == mem.data.length) {
        // no data or end of data, populate with new data
        if (readln() is Some (line))
        {
            // save new line from input and reset index
            mem.data = line;
            mem.ind = 0;
            // get first char
            newchar := mem.data[mem.ind];
            // move index to next char
            mem.ind += 1;
            return newchar;
        }
    }
    else {
        // get next char
        newchar := mem.data[mem.ind];
        // move pointer to next char
        mem.ind += 1;
        return newchar;
    }
}


func interpret(tokens: string)
{

    // set up bf memory and pointers
    data: [30000]byte;
    prog_len := tokens.length;
    p_ptr := 0;
    d_ptr := 0;
    // memory for readChar function
    line_data := Line_mem {data="",ind=0};

    while (p_ptr < prog_len)
    {
        instruction := tokens[p_ptr];
        match (instruction)
        {
            '.' ::  write(cellToString(data[d_ptr]));
            ',' ::  data[d_ptr] = intToByte(ord(readChar(line_data)));
            '+' ::  data[d_ptr] = intToByte(data[d_ptr] + 1);
            '-' ::  data[d_ptr] = intToByte(data[d_ptr] - 1);
            '<' ::  d_ptr = d_ptr - 1;
            '>' ::  d_ptr = d_ptr + 1;
            '[' ::  if (data[d_ptr] == 0)
                    {
                        // traverse program. keep track of the encountered '[' and ']'
                        // to know when we have reached a matching ']' not just any ']'
                        num_bracks := 1;
                        while (num_bracks > 0) {
                            p_ptr = p_ptr + 1;
                            if (tokens[p_ptr] == ']') {
                                num_bracks = num_bracks - 1;
                            }
                            else if (tokens[p_ptr] == '[') {
                                num_bracks = num_bracks + 1;
                            }
                        }
                    }
            ']' ::  if (data[d_ptr] != 0)
                    {
                        // reverse traverse program. keep track of the encountered '[' and ']'
                        // to know when we have reached a matching '[' not just any '['
                        num_bracks := 1;
                        while (num_bracks > 0) {
                            p_ptr = p_ptr - 1;
                            if (tokens[p_ptr] == '[') {
                                num_bracks = num_bracks - 1;
                            }
                            else if (tokens[p_ptr] == ']') {
                                num_bracks = num_bracks + 1;
                            }
                        }
                    }
        }
        p_ptr := p_ptr + 1;
    }
}

func main(argv: []string)
{
    if (mellow_fopen(argv[1], Read) is Some (file))
    {
        // read in program from file
        tokens := tokenizeInput(file);
        // run it
        interpret(tokens);
    }
}

