
import std.io;
import std.conv;
import std.core;

variant Token {
    LeftBrack,
    RightBrack,
    Plus,
    Minus,
    LeftWakka,
    RightWakka,
    Period,
    Comma
}

variant Expr {
    Loop ([]Expr),
    Inc,
    Dec,
    MoveLeft,
    MoveRight,
    Input,
    Output
}

func tokenizer(source: string, out: chan!(Maybe!Token)) {
    foreach (c; source) {
        match (c) {
            '>' :: out <-= Some!Token(RightWakka);
            '<' :: out <-= Some!Token(LeftWakka);
            '+' :: out <-= Some!Token(Plus);
            '-' :: out <-= Some!Token(Minus);
            '[' :: out <-= Some!Token(LeftBrack);
            ']' :: out <-= Some!Token(RightBrack);
            '.' :: out <-= Some!Token(Period);
            ',' :: out <-= Some!Token(Comma);
        }
    }
    out <-= None!Token;
}

func balanced(source: string): bool {
    count := 0;
    while (i := 0; i < source.length) {
        if (source[i] == '[') {
            count = count + 1;
        }
        else if (source[i] == ']') {
            if (count == 0) {
                return false;
            }
            count = count - 1;
        }
        i = i + 1;
    }
    if (count == 0) {
        return true;
    }
    return false;
}

func innerParser(tokens: chan!(Maybe!Token)): Maybe!([]Expr) {
    exprs: []Expr;
    while (<-tokens is Some(token)) {
        match (token) {
            LeftWakka  :: exprs ~= MoveLeft;
            RightWakka :: exprs ~= MoveRight;
            Plus       :: exprs ~= Inc;
            Minus      :: exprs ~= Dec;
            Period     :: exprs ~= Output;
            Comma      :: exprs ~= Input;
            RightBrack :: return Some!([]Expr)(exprs);
            LeftBrack  ::
                if (innerParser(tokens) is Some(loop)) {
                    exprs ~= Loop(loop);
                }
                else {
                    return None!([]Expr);
                }
        }
    }
    return None!([]Expr);
}

func parser(source: string): Maybe!([]Expr) {
    if (!balanced(source)) {
        writeln("Err: Unbalanced brackets");
        return None!([]Expr);
    }
    tokens: chan!(Maybe!Token);
    spawn tokenizer(source, tokens);
    exprs: []Expr;
    while (<-tokens is Some(token)) {
        match (token) {
            LeftWakka  :: exprs ~= MoveLeft;
            RightWakka :: exprs ~= MoveRight;
            Plus       :: exprs ~= Inc;
            Minus      :: exprs ~= Dec;
            Period     :: exprs ~= Output;
            Comma      :: exprs ~= Input;
            RightBrack :: {
                writeln("Err: Unmatched right bracket");
                return None!([]Expr);
            }
            LeftBrack  :: {
                if (innerParser(tokens) is Some(loop)) {
                    exprs ~= Loop(loop);
                }
                else {
                    writeln("Err: Unmatched left bracket");
                    return None!([]Expr);
                }
            }
        }
    }
    return Some!([]Expr)(exprs);
}

func printTree(program: []Expr, indent: string) {
    foreach (expr; program) {
        match (expr) {
            Inc          :: writeln(indent ~ "Inc");
            Dec          :: writeln(indent ~ "Dec");
            MoveLeft     :: writeln(indent ~ "MoveLeft");
            MoveRight    :: writeln(indent ~ "MoveRight");
            Input        :: writeln(indent ~ "Input");
            Output       :: writeln(indent ~ "Output");
            Loop (inner) :: {
                writeln(indent ~ "Loop:");
                printTree(inner, indent ~ "  ");
            }
        }
    }
}

func innerInterpret(seq: []Expr, tape: []int, i: int): int {
    line: string;
    foreach (expr; seq) {
        match (expr) {
            Input        :: {}
            Output       :: writeln(intToString(tape[i]));
            Inc          :: tape[i] = tape[i] + 1;
            Dec          :: tape[i] = tape[i] - 1;
            MoveLeft     :: {
                i = i - 1;
                if (i < 0)
                {
                    i = tape.length - 1;
                }
            }
            MoveRight    :: {
                i = i + 1;
                if (i >= tape.length)
                {
                    i = 0;
                }
            }
            Loop (inner) :: {
                while (tape[i] != 0)
                {
                    i = innerInterpret(inner, tape, i);
                }
            }
        }
    }
    return i;
}

func interpret(source: string) {
    if (parser(source) is Some(program)) {
        tape: [30000]int;
        while (i := 0; i < tape.length) {
            tape[i] = 0;
            i = i + 1;
        }
        innerInterpret(program, tape, 0);
    }
}

func main(argv: []string) {
    if (argv.length < 2) {
        writeln("Usage: ./bf [filename]");
        return;
    }
    if (mellow_fopen(argv[1], Read) is Some(file)) {
        source := "";
        while (mellow_freadln(file) is Some(line)) {
            source = source ~ line;
        }
        interpret(source);
    }
}
