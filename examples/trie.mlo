// A basic Trie (Digital Tree) implementation as key-value map.

import std.io;
import std.conv;
import std.core;

variant Trie(T) {
    Root (Maybe!T, []Trie!T),
    Node (Maybe!T, char, []Trie!T)
}

func trySubTries(T)(subTries: []Trie!T, c: char): Maybe!int {
    foreach (i, subTrie; subTries) {
        match (subTrie) {
            Node (_, x, _) if (x == c) :: return Some!int(i);
        }
    }
    return None!int;
}

func findSubTrie(T)(trie: Trie!T, c: char): Maybe!int {
    match(trie) {
        Root (_, subTries) ::
            return trySubTries!T(subTries, c);
        Node (_, _, subTries) :: {
            return trySubTries!T(subTries, c);
        }
    }
}

func find(T)(trie: Trie!T, key: string): Maybe!T {
    match (trie) {
        Root (subVal, _) if (key == "") :: return subVal;
        Root (_, subTries) ::
            match (findSubTrie!T(trie, key[0])) {
                Some (i)    :: return find!T(subTries[i], key[1..]);
                _           :: return None!T;
            }
        Node (subVal, _, _) if (key == "") :: return subVal;
        Node (_, _, subTries) ::
            match (findSubTrie!T(trie, key[0])) {
                Some (i)    :: return find!T(subTries[i], key[1..]);
                _           :: return None!T;
            }
    }
}

func insertSubTrie(T)(trie: Trie!T, key: string, val: T, subTries: []Trie!T): []Trie!T {
    if (findSubTrie!T(trie, key[0]) is Some (i)) {
        return subTries[..i] ~ insert!T(subTries[i], key[1..], val) ~ subTries[i+1..];
    }
    return subTries ~ insert!T(Node!T(None!T, key[0], []), key[1..], val);
}

func insert(T)(trie: Trie!T, key: string, val: T): Trie!T {
    match (trie) {
        Root (_, subTries) if (key == "") ::
            return Root!T(Some!T(val), subTries);
        Root (subVal, subTries) ::
            return Root!T(subVal, insertSubTrie!T(trie, key, val, subTries));
        Node (_, subChar, subTries) if (key == "") ::
            return Node!T(Some!T(val), subChar, subTries);
        Node (subVal, subChar, subTries) ::
            return Node!T(subVal, subChar, insertSubTrie!T(trie, key, val, subTries));
    }
}

func createTrie(T)(): Trie!T {
    return Root!T(None!T, []);
}

func printTrieInt(trie: Trie!int) { printTrieIndentInt(trie, ""); }
func printTrieIndentInt(trie: Trie!int, indent: string) {
    match (trie) {
        Root (Some (x), arr) :: {
            writeln(indent ~ "Root, Val: " ~ intToString(x));
            foreach (a; arr) {
                printTrieIndentInt(a, indent ~ "  ");
            }
        }
        Root (None, arr) :: {
            writeln(indent ~ "Root");
            foreach (a; arr) {
                printTrieIndentInt(a, indent ~ "  ");
            }
        }
        Node (Some (x), c, arr) :: {
            writeln(indent ~ "Node: " ~ charToString(c) ~ ", Val: " ~ intToString(x));
            foreach (a; arr) {
                printTrieIndentInt(a, indent ~ "  ");
            }
        }
        Node (None, c, arr) :: {
            writeln(indent ~ "Node: " ~ charToString(c));
            foreach (a; arr) {
                printTrieIndentInt(a, indent ~ "  ");
            }
        }
    }
}

func printTrieString(trie: Trie!string) { printTrieIndentString(trie, ""); }
func printTrieIndentString(trie: Trie!string, indent: string) {
    match (trie) {
        Root (Some (x), arr) :: {
            writeln(indent ~ "Root, Val: " ~ x);
            foreach (a; arr) {
                printTrieIndentString(a, indent ~ "  ");
            }
        }
        Root (None, arr) :: {
            writeln(indent ~ "Root");
            foreach (a; arr) {
                printTrieIndentString(a, indent ~ "  ");
            }
        }
        Node (Some (x), c, arr) :: {
            writeln(indent ~ "Node: " ~ charToString(c) ~ ", Val: " ~ x);
            foreach (a; arr) {
                printTrieIndentString(a, indent ~ "  ");
            }
        }
        Node (None, c, arr) :: {
            writeln(indent ~ "Node: " ~ charToString(c));
            foreach (a; arr) {
                printTrieIndentString(a, indent ~ "  ");
            }
        }
    }
}

func main() {

    // Manual constuction of integer Trie
    intTrie := Root!int(
        None!int, [
            Node!int(
                Some!int(25), 'I', [
                    Node!int(Some!int(56), 'S', []),
                    Node!int(Some!int(143), 'N', [])
                ]
            ),
            Node!int(Some!int(13), 'A', [])
        ]
    );
    printTrieInt(intTrie);

    // Search for key "IN" in integer trie
    num := find!int(intTrie, "IN");
    if (num is Some(x)) {
        writeln("Found: " ~ intToString(x));
    } else {
        writeln("NONE");
    }


    // Manual constuction of string Trie
    strTrie := Root!string(
        None!string, [
            Node!string(
                Some!string("This is I"), 'I', [
                    Node!string(Some!string("This is S"), 'S', []),
                    Node!string(Some!string("This is N"), 'N', [])
                ]
            ),
            Node!string(Some!string("This is A"), 'A', [])
        ]
    );
    printTrieString(strTrie);

    // Search for key "IS" in string trie
    str := find!string(strTrie, "IS");
    if (str is Some(x)) {
        writeln("Found: " ~ x);
    } else {
        writeln("NONE");
    }


    // Construct new integer Trie and insert key-value pairs
    newTrie := createTrie!int();
    printTrieInt(newTrie);
    newTrie := insert!int(newTrie, "YES", 1234);
    newTrie := insert!int(newTrie, "", 1001);
    newTrie := insert!int(newTrie, "YEAH", 243);
    newTrie := insert!int(newTrie, "NO", 11243);
    newTrie := insert!int(newTrie, "NOPE", 2334);
    newTrie := insert!int(newTrie, "A", 1253);
    newTrie := insert!int(newTrie, "ALL", 1423);
    newTrie := insert!int(newTrie, "YEA", 22343);
    printTrieInt(newTrie);

    // Search for inserted and non-existant keys
    if (find!int(newTrie, "") is Some(x)) { writeln("Found: \"\" = " ~ intToString(x)); }
    if (find!int(newTrie, "IN") is Some(x)) { writeln("Found: IN = " ~ intToString(x)); }
    if (find!int(newTrie, "YES") is Some(x)) { writeln("Found: YES = " ~ intToString(x)); }
    if (find!int(newTrie, "NO") is Some(x)) { writeln("Found: NO = " ~ intToString(x)); }
    if (find!int(newTrie, "ALL") is Some(x)) { writeln("Found: ALL = " ~ intToString(x)); }
    if (find!int(newTrie, "YEA") is Some(x)) { writeln("Found: YEA = " ~ intToString(x)); }

}
